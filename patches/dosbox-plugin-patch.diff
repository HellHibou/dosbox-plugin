diff --git a/src/gui/sdlmain.cpp b/src/gui/sdlmain.cpp
index 43df32f..3c252b8 100644
--- a/src/gui/sdlmain.cpp
+++ b/src/gui/sdlmain.cpp
@@ -50,6 +50,8 @@
 #include "cross.h"
 #include "control.h"
 
+#include "../plugin/src/DosBoxPatch/dosboxPluginPatch.hpp"
+
 #define MAPPERFILE "mapper-" VERSION ".map"
 //#define DISABLE_JOYSTICK
 
@@ -284,27 +286,46 @@ extern bool CPU_CycleAutoAdjust;
 //Globals for keyboard initialisation
 bool startup_state_numlock=false;
 bool startup_state_capslock=false;
+static bool showTitleInfo=true;
 
 void GFX_SetTitle(Bit32s cycles,Bits frameskip,bool paused){
-	char title[200]={0};
+	char * title;
 	static Bit32s internal_cycles=0;
 	static Bit32s internal_frameskip=0;
 	if(cycles != -1) internal_cycles = cycles;
 	if(frameskip != -1) internal_frameskip = frameskip;
-	if(CPU_CycleAutoAdjust) {
-		sprintf(title,"DOSBox %s, CPU speed: max %3d%% cycles, Frameskip %2d, Program: %8s",VERSION,internal_cycles,internal_frameskip,RunningProgram);
+
+	if (DosBoxPluginManager::windowTitle == NULL) { // Using custom title ?
+		title = (char*)malloc(200);
+		if(showTitleInfo) {
+			if(CPU_CycleAutoAdjust) {
+			if (DosBoxPluginManager::windowTitle == NULL) {
+				sprintf(title,"DOSBox %s, CPU speed: max %3d%% cycles, Frameskip %2d, Program: %8s",VERSION,internal_cycles,internal_frameskip,RunningProgram); }
+			} else {
+				sprintf(title,"DOSBox %s, CPU speed: %8d cycles, Frameskip %2d, Program: %8s",VERSION,internal_cycles,internal_frameskip,RunningProgram); }
+		} else {
+			sprintf(title,"%s",RunningProgram); }
 	} else {
-		sprintf(title,"DOSBox %s, CPU speed: %8d cycles, Frameskip %2d, Program: %8s",VERSION,internal_cycles,internal_frameskip,RunningProgram);
+		title = (char*)malloc(200 + strlen(DosBoxPluginManager::windowTitle));
+		if(showTitleInfo) {
+			if(CPU_CycleAutoAdjust) {
+			if (DosBoxPluginManager::windowTitle == NULL) {
+				sprintf(title,"DOSBox %s, CPU speed: max %3d%% cycles, Frameskip %2d, Program: %8s",VERSION,internal_cycles,internal_frameskip,DosBoxPluginManager::windowTitle); }
+			} else {
+				sprintf(title,"DOSBox %s, CPU speed: %8d cycles, Frameskip %2d, Program: %8s",VERSION,internal_cycles,internal_frameskip,DosBoxPluginManager::windowTitle); }
+		} else {
+		sprintf(title,"%s",DosBoxPluginManager::windowTitle); }
 	}
-
+	
 	if(paused) strcat(title," PAUSED");
 	SDL_WM_SetCaption(title,VERSION);
+	free(title);
 }
 
 static unsigned char logo[32*32*4]= {
 #include "dosbox_logo.h"
 };
-static void GFX_SetIcon() {
+void GFX_SetIcon() {
 #if !defined(MACOSX)
 	/* Set Icon (must be done before any sdl_setvideomode call) */
 	/* But don't set it on OS X, as we use a nicer external icon there. */
@@ -1161,6 +1182,7 @@ void Restart(bool pressed);
 static void GUI_StartUp(Section * sec) {
 	sec->AddDestroyFunction(&GUI_ShutDown);
 	Section_prop * section=static_cast<Section_prop *>(sec);
+	showTitleInfo = section->Get_bool("showtitleinfo");
 	sdl.active=false;
 	sdl.updating=false;
 
@@ -1717,6 +1739,9 @@ void Config_Add_SDL() {
 
 	Pbool = sdl_sec->Add_bool("usescancodes",Property::Changeable::Always,true);
 	Pbool->Set_help("Avoid usage of symkeys, might not work on all operating systems.");
+
+	Pbool = sdl_sec->Add_bool("showtitleinfo",Property::Changeable::Always,true);
+	Pbool->Set_help("Show extra information into title's window");
 }
 
 static void show_warning(char const * const message) {
@@ -1897,6 +1922,7 @@ int main(int argc, char* argv[]) {
 		/* Init the configuration system and add default values */
 		Config_Add_SDL();
 		DOSBOX_Init();
+		DosBoxPluginManager::preInit(control);
 
 		std::string editor;
 		if(control->cmdline->FindString("-editconf",editor,false)) launcheditor();
diff --git a/src/shell/shell.cpp b/src/shell/shell.cpp
index 2aa174b..87af5ac 100644
--- a/src/shell/shell.cpp
+++ b/src/shell/shell.cpp
@@ -27,6 +27,7 @@
 #include "callback.h"
 #include "support.h"
 
+#include "../plugin/src/DosBoxPatch/dosboxPluginPatch.hpp"
 
 Bitu call_shellstop;
 /* Larger scope so shell_del autoexec can use it to
@@ -325,6 +326,7 @@ void DOS_Shell::Run(void) {
 				if (echo) WriteOut("\n");
 			}
 		} else {
+			DosBoxPluginManager::start(); 
 			if (echo) ShowPrompt();
 			InputCommand(input_line);
 			ParseLine(input_line);
@@ -680,7 +682,9 @@ void SHELL_Init() {
 
 	
 	SHELL_ProgramStart(&first_shell);
+	DosBoxPluginManager::postInit((DOS_Shell*)first_shell);
 	first_shell->Run();
+	DosBoxPluginManager::unload();
 	delete first_shell;
 	first_shell = 0;//Make clear that it shouldn't be used anymore
 }
diff --git a/src/shell/shell_misc.cpp b/src/shell/shell_misc.cpp
index d131e7a..89e07ad 100644
--- a/src/shell/shell_misc.cpp
+++ b/src/shell/shell_misc.cpp
@@ -51,6 +51,7 @@ void DOS_Shell::InputCommand(char * line) {
 	std::list<std::string>::iterator it_history = l_history.begin(), it_completion = l_completion.begin();
 
 	while (size) {
+		if (this->exit) { return; }
 		dos.echo=false;
 		while(!DOS_ReadFile(input_handle,&c,&n)) {
 			Bit16u dummy;
